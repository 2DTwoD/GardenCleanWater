<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\GardenCleanWater.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\GardenCleanWater.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Fri May 24 16:15:44 2024
<BR><P>
<H3>Maximum Stack Usage =        256 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_stm32f10x.o(.text.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from main.o(.text.TIM2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[54]">_GLOBAL__sub_I_main.cpp</a> from main.o(.text._GLOBAL__sub_I_main.cpp) referenced from main.o(.init_array)
 <LI><a href="#[37]">OBTask(void*)</a> from ob.o(.text._Z6OBTaskPv) referenced 6 times from main.o(.text.main)
 <LI><a href="#[38]">CHBTask(void*)</a> from chb.o(.text._Z7CHBTaskPv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[39]">diagTask(void*)</a> from diag.o(.text._Z8diagTaskPv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[3d]">CommonTimer::started()</a> from common_timer.o(.text._ZN11CommonTimer7startedEv) referenced from common_timer.o(.rodata._ZTV11CommonTimer)
 <LI><a href="#[3d]">CommonTimer::started()</a> from common_timer.o(.text._ZN11CommonTimer7startedEv) referenced from pulse.o(.rodata._ZTV11PulseCommon)
 <LI><a href="#[3d]">CommonTimer::started()</a> from common_timer.o(.text._ZN11CommonTimer7startedEv) referenced from coil_with_timer.o(.rodata._ZTV12CoilOffDelay)
 <LI><a href="#[3d]">CommonTimer::started()</a> from common_timer.o(.text._ZN11CommonTimer7startedEv) referenced from off_delay.o(.rodata._ZTV14OffDelayCommon)
 <LI><a href="#[3d]">CommonTimer::started()</a> from common_timer.o(.text._ZN11CommonTimer7startedEv) referenced from pulse.o(.rodata._ZTV14PulseInterrapt)
 <LI><a href="#[3d]">CommonTimer::started()</a> from common_timer.o(.text._ZN11CommonTimer7startedEv) referenced from sequence.o(.rodata._ZTV15SequenceDelayed)
 <LI><a href="#[3d]">CommonTimer::started()</a> from common_timer.o(.text._ZN11CommonTimer7startedEv) referenced from simple_input.o(.rodata._ZTV18SimpleInputDelayed)
 <LI><a href="#[3d]">CommonTimer::started()</a> from common_timer.o(.text._ZN11CommonTimer7startedEv) referenced from coil_with_timer.o(.rodata._ZTV9CoilPulse)
 <LI><a href="#[3f]">SimpleInput::isActive()</a> from simple_input.o(.text._ZN11SimpleInput8isActiveEv) referenced from simple_input.o(.rodata._ZTV11SimpleInput)
 <LI><a href="#[41]">CoilOffDelay::setValue(bool)</a> from coil_with_timer.o(.text._ZN12CoilOffDelay8setValueEb) referenced from coil_with_timer.o(.rodata._ZTV12CoilOffDelay)
 <LI><a href="#[40]">CoilOffDelay::update1ms()</a> from coil_with_timer.o(.text._ZN12CoilOffDelay9update1msEv) referenced from coil_with_timer.o(.rodata._ZTV12CoilOffDelay)
 <LI><a href="#[45]">ProgrammCoil::isActive()</a> from coil.o(.text._ZN12ProgrammCoil8isActiveEv) referenced from coil.o(.rodata._ZTV12ProgrammCoil)
 <LI><a href="#[46]">ProgrammCoil::setValue(bool)</a> from coil.o(.text._ZN12ProgrammCoil8setValueEb) referenced from coil.o(.rodata._ZTV12ProgrammCoil)
 <LI><a href="#[47]">PulseInterrapt::update1ms()</a> from pulse.o(.text._ZN14PulseInterrapt9update1msEv) referenced from pulse.o(.rodata._ZTV14PulseInterrapt)
 <LI><a href="#[49]">SequenceDelayed::update1ms()</a> from sequence.o(.text._ZN15SequenceDelayed9update1msEv) referenced from sequence.o(.rodata._ZTV15SequenceDelayed)
 <LI><a href="#[4c]">SimpleInputDelayed::isActive()</a> from simple_input.o(.text._ZN18SimpleInputDelayed8isActiveEv) referenced from simple_input.o(.rodata._ZTV18SimpleInputDelayed)
 <LI><a href="#[4b]">SimpleInputDelayed::update1ms()</a> from simple_input.o(.text._ZN18SimpleInputDelayed9update1msEv) referenced from simple_input.o(.rodata._ZTV18SimpleInputDelayed)
 <LI><a href="#[42]">Coil::isActive()</a> from coil.o(.text._ZN4Coil8isActiveEv) referenced from coil_with_timer.o(.rodata._ZTV12CoilOffDelay)
 <LI><a href="#[42]">Coil::isActive()</a> from coil.o(.text._ZN4Coil8isActiveEv) referenced from coil.o(.rodata._ZTV4Coil)
 <LI><a href="#[42]">Coil::isActive()</a> from coil.o(.text._ZN4Coil8isActiveEv) referenced from coil_with_timer.o(.rodata._ZTV9CoilPulse)
 <LI><a href="#[4f]">Coil::setValue(bool)</a> from coil.o(.text._ZN4Coil8setValueEb) referenced from coil.o(.rodata._ZTV4Coil)
 <LI><a href="#[51]">CoilPulse::setValue(bool)</a> from coil_with_timer.o(.text._ZN9CoilPulse8setValueEb) referenced from coil_with_timer.o(.rodata._ZTV9CoilPulse)
 <LI><a href="#[50]">CoilPulse::update1ms()</a> from coil_with_timer.o(.text._ZN9CoilPulse9update1msEv) referenced from coil_with_timer.o(.rodata._ZTV9CoilPulse)
 <LI><a href="#[43]">non-virtual thunk to CoilOffDelay::setValue(bool)</a> from coil_with_timer.o(.text._ZThn16_N12CoilOffDelay8setValueEb) referenced from coil_with_timer.o(.rodata._ZTV12CoilOffDelay)
 <LI><a href="#[48]">non-virtual thunk to PulseInterrapt::update1ms()</a> from pulse.o(.text._ZThn16_N14PulseInterrapt9update1msEv) referenced from pulse.o(.rodata._ZTV14PulseInterrapt)
 <LI><a href="#[4d]">non-virtual thunk to SimpleInputDelayed::isActive()</a> from simple_input.o(.text._ZThn16_N18SimpleInputDelayed8isActiveEv) referenced from simple_input.o(.rodata._ZTV18SimpleInputDelayed)
 <LI><a href="#[52]">non-virtual thunk to CoilPulse::setValue(bool)</a> from coil_with_timer.o(.text._ZThn16_N9CoilPulse8setValueEb) referenced from coil_with_timer.o(.rodata._ZTV9CoilPulse)
 <LI><a href="#[4a]">non-virtual thunk to SequenceDelayed::update1ms()</a> from sequence.o(.text._ZThn28_N15SequenceDelayed9update1msEv) referenced from sequence.o(.rodata._ZTV15SequenceDelayed)
 <LI><a href="#[44]">non-virtual thunk to CoilOffDelay::update1ms()</a> from coil_with_timer.o(.text._ZThn32_N12CoilOffDelay9update1msEv) referenced from coil_with_timer.o(.rodata._ZTV12CoilOffDelay)
 <LI><a href="#[4e]">non-virtual thunk to SimpleInputDelayed::update1ms()</a> from simple_input.o(.text._ZThn32_N18SimpleInputDelayed9update1msEv) referenced from simple_input.o(.rodata._ZTV18SimpleInputDelayed)
 <LI><a href="#[53]">non-virtual thunk to CoilPulse::update1ms()</a> from coil_with_timer.o(.text._ZThn32_N9CoilPulse9update1msEv) referenced from coil_with_timer.o(.rodata._ZTV9CoilPulse)
 <LI><a href="#[3e]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from coil_with_timer.o(.rodata._ZTV11IUpdated1ms)
 <LI><a href="#[3e]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from coil.o(.rodata._ZTV7ISwitch)
 <LI><a href="#[36]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[3b]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[3a]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[3c]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[59]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[12e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5a]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[130]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[131]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[132]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[133]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[134]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[5b]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[135]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[136]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[137]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[138]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[139]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[140]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[141]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[142]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[143]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[144]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[145]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[146]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[64]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[147]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[148]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[14a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[58]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[14e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[5c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[14f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[60]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[150]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[70]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[63]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[151]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[65]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[67]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[152]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[154]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[158]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[66]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[5d]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[62]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6d]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[15e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[15f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[71]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[73]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[74]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, system_stm32f10x.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
</UL>

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>commonInit()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init.o(.text._Z10commonInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = commonInit() &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>getPosition(unsigned int)</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, common.o(.text._Z11getPositionj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getPosition(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[c7]"></a>void setRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, init.o(.text._Z11setRegisterIVjEvPT_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void setRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInput::SimpleInput(GPIO_TypeDef*, unsigned char)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rccInit()
</UL>

<P><STRONG><a name="[af]"></a>resetAllSteps(TaskKit*)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ob.o(.text._Z13resetAllStepsP7TaskKit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = resetAllSteps(TaskKit*) &rArr; Sequence::reset() &rArr; RFimpulse::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilPulse::operator=(bool)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::operator=(bool)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[b3]"></a>resetCHBsteps()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, common_for_tasks.o(.text._Z13resetCHBstepsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = resetCHBsteps() &rArr; Sequence::reset() &rArr; RFimpulse::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::operator=(bool)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[b4]"></a>pushSeqInQueue(Sequence*)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, common_for_tasks.o(.text._Z14pushSeqInQueueP8Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pushSeqInQueue(Sequence*) &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[b7]"></a>getSeqFromQueue()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, common_for_tasks.o(.text._Z15getSeqFromQueuev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getSeqFromQueue() &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHBTask(void*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[b8]"></a>void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, coil.o(.text._Z17setBitsInRegisterIVjEvPT_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPosition(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[ba]"></a>deleteSeqFromQueue(Sequence*)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, common_for_tasks.o(.text._Z18deleteSeqFromQueueP8Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = deleteSeqFromQueue(Sequence*) &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[37]"></a>OBTask(void*)</STRONG> (Thumb, 672 bytes, Stack size 64 bytes, ob.o(.text._Z6OBTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = OBTask(void*) &rArr; PulseInterrapt::operator=(bool) &rArr; PulseInterrapt::set(bool) &rArr; PulseCommon::set(bool) &rArr; CommonTimer::isFree() &rArr; CommonTimer::notStarted()
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::lock(bool)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::locked()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::get()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::finish(bool)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInput::isNotActive()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::start(bool)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::finishedImpulse()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseInterrapt::operator=(bool)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::active()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilPulse::operator=(bool)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetAllSteps(TaskKit*)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::operator=(bool)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetCHBsteps()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteSeqFromQueue(Sequence*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSeqFromQueue()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushSeqInQueue(Sequence*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[38]"></a>CHBTask(void*)</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, chb.o(.text._Z7CHBTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CHBTask(void*) &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilOffDelay::operator=(bool)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::isActive()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::lock(bool)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::finish(bool)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInput::isNotActive()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::start(bool)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::finishedImpulse()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::active()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::operator=(bool)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSeqFromQueue()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[c6]"></a>rccInit()</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, init.o(.text._Z7rccInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rccInit() &rArr; void setRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void setRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>diagTask(void*)</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, diag.o(.text._Z8diagTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = diagTask(void*) &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::operator=(bool)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[c8]"></a>tickInit()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, init.o(.text._Z8tickInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tickInit() &rArr; __NVIC_SetPriority(IRQn, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn, unsigned int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>GPIOcommon::GPIOcommon(GPIO_TypeDef*, unsigned char)</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, gpio_common.o(.text._ZN10GPIOcommonC2EP12GPIO_TypeDefh), UNUSED)

<P><STRONG><a name="[dd]"></a>GPIOcommon::GPIOcommon__sub_object(GPIO_TypeDef*, unsigned char)</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, gpio_common.o(.text._ZN10GPIOcommonC2EP12GPIO_TypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOcommon::GPIOcommon__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInput::SimpleInput(GPIO_TypeDef*, unsigned char)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[d3]"></a>CommonTimer::notStarted()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11CommonTimer10notStartedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonTimer::notStarted()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::isFree()
</UL>

<P><STRONG><a name="[d1]"></a>CommonTimer::notFinished()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11CommonTimer11notFinishedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonTimer::notFinished()
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::inWork()
</UL>

<P><STRONG><a name="[cb]"></a>CommonTimer::prepareAndStart()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, common_timer.o(.text._ZN11CommonTimer15prepareAndStartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CommonTimer::prepareAndStart() &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::stop()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffDelayCommon::set(bool)
</UL>

<P><STRONG><a name="[cc]"></a>CommonTimer::stop()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, common_timer.o(.text._ZN11CommonTimer4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::reset()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::pause()
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::prepareAndStart()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::setStart(bool)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::update()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffDelayCommon::set(bool)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffDelayCommon::update()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::reset()
</UL>

<P><STRONG><a name="[ce]"></a>CommonTimer::pause()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11CommonTimer5pauseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonTimer::pause()
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::stop()
</UL>

<P><STRONG><a name="[cf]"></a>CommonTimer::reset()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11CommonTimer5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonTimer::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::stop()
</UL>

<P><STRONG><a name="[cd]"></a>CommonTimer::start()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11CommonTimer5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonTimer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::prepareAndStart()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::setStart(bool)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::set(bool)
</UL>

<P><STRONG><a name="[d0]"></a>CommonTimer::inWork()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, common_timer.o(.text._ZN11CommonTimer6inWorkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CommonTimer::inWork() &rArr; CommonTimer::notFinished()
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::notFinished()
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffDelayCommon::get()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::get()
</UL>

<P><STRONG><a name="[d2]"></a>CommonTimer::isFree()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, common_timer.o(.text._ZN11CommonTimer6isFreeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CommonTimer::isFree() &rArr; CommonTimer::notStarted()
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::notStarted()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finished()
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::set(bool)
</UL>

<P><STRONG><a name="[d5]"></a>CommonTimer::update()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, common_timer.o(.text._ZN11CommonTimer6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CommonTimer::update() &rArr; CommonTimer::finished()
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finished()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::update1ms()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::update()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffDelayCommon::update()
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::update1ms()
</UL>

<P><STRONG><a name="[3d]"></a>CommonTimer::started()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11CommonTimer7startedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonTimer::started()
</UL>
<BR>[Address Reference Count : 8]<UL><LI> coil_with_timer.o(.rodata._ZTV12CoilOffDelay)
<LI> coil_with_timer.o(.rodata._ZTV9CoilPulse)
<LI> common_timer.o(.rodata._ZTV11CommonTimer)
<LI> simple_input.o(.rodata._ZTV18SimpleInputDelayed)
<LI> pulse.o(.rodata._ZTV14PulseInterrapt)
<LI> off_delay.o(.rodata._ZTV14OffDelayCommon)
<LI> pulse.o(.rodata._ZTV11PulseCommon)
<LI> sequence.o(.rodata._ZTV15SequenceDelayed)
</UL>
<P><STRONG><a name="[d4]"></a>CommonTimer::finished()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, common_timer.o(.text._ZN11CommonTimer8finishedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CommonTimer::finished()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::isFree()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::update()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::update()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffDelayCommon::update()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::isActive()
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::update1ms()
</UL>

<P><STRONG><a name="[d6]"></a>CommonTimer::setStart(bool)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, common_timer.o(.text._ZN11CommonTimer8setStartEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CommonTimer::setStart(bool) &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::stop()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::update1ms()
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::update1ms()
</UL>

<P><STRONG><a name="[164]"></a>CommonTimer::CommonTimer(unsigned int)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, common_timer.o(.text._ZN11CommonTimerC2Ej), UNUSED)

<P><STRONG><a name="[db]"></a>CommonTimer::CommonTimer__sub_object(unsigned int)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, common_timer.o(.text._ZN11CommonTimerC2Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommonTimer::CommonTimer__sub_object(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::PulseCommon(unsigned int)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffDelayCommon::OffDelayCommon(unsigned int)
</UL>

<P><STRONG><a name="[e5]"></a>IUpdated1ms::IUpdated1ms__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, coil_with_timer.o(.text._ZN11IUpdated1msC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IUpdated1ms::IUpdated1ms__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseInterrapt::PulseInterrapt(unsigned int)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilOffDelay::CoilOffDelay(GPIO_TypeDef*, unsigned char, unsigned short)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilPulse::CoilPulse(GPIO_TypeDef*, unsigned char, unsigned short)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[c1]"></a>PulseCommon::get()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pulse.o(.text._ZN11PulseCommon3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PulseCommon::get() &rArr; CommonTimer::inWork() &rArr; CommonTimer::notFinished()
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::inWork()
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilPulse::update1ms()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[d7]"></a>PulseCommon::set(bool)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, pulse.o(.text._ZN11PulseCommon3setEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PulseCommon::set(bool) &rArr; CommonTimer::isFree() &rArr; CommonTimer::notStarted()
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::isFree()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilPulse::setValue(bool)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseInterrapt::set(bool)
</UL>

<P><STRONG><a name="[d8]"></a>PulseCommon::reset()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pulse.o(.text._ZN11PulseCommon5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PulseCommon::reset() &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseInterrapt::set(bool)
</UL>

<P><STRONG><a name="[d9]"></a>PulseCommon::update()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pulse.o(.text._ZN11PulseCommon6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PulseCommon::update() &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::stop()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finished()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilPulse::update1ms()
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseInterrapt::update1ms()
</UL>

<P><STRONG><a name="[da]"></a>PulseCommon::PulseCommon(unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pulse.o(.text._ZN11PulseCommonC2Ej), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::CommonTimer__sub_object(unsigned int)
</UL>

<P><STRONG><a name="[ea]"></a>PulseCommon::PulseCommon__sub_object(unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pulse.o(.text._ZN11PulseCommonC2Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PulseCommon::PulseCommon__sub_object(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseInterrapt::PulseInterrapt(unsigned int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilPulse::CoilPulse(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[bf]"></a>SimpleInput::isNotActive()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, simple_input.o(.text._ZN11SimpleInput11isNotActiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SimpleInput::isNotActive()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHBTask(void*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[3f]"></a>SimpleInput::isActive()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, simple_input.o(.text._ZN11SimpleInput8isActiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SimpleInput::isActive()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simple_input.o(.rodata._ZTV11SimpleInput)
</UL>
<P><STRONG><a name="[dc]"></a>SimpleInput::SimpleInput(GPIO_TypeDef*, unsigned char)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, simple_input.o(.text._ZN11SimpleInputC2EP12GPIO_TypeDefh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISwitch::ISwitch__sub_object()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOcommon::GPIOcommon__sub_object(GPIO_TypeDef*, unsigned char)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void setRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[ee]"></a>SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, simple_input.o(.text._ZN11SimpleInputC2EP12GPIO_TypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[41]"></a>CoilOffDelay::setValue(bool)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, coil_with_timer.o(.text._ZN12CoilOffDelay8setValueEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CoilOffDelay::setValue(bool) &rArr; OffDelayCommon::set(bool) &rArr; CommonTimer::prepareAndStart() &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffDelayCommon::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to CoilOffDelay::setValue(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil_with_timer.o(.rodata._ZTV12CoilOffDelay)
</UL>
<P><STRONG><a name="[40]"></a>CoilOffDelay::update1ms()</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, coil_with_timer.o(.text._ZN12CoilOffDelay9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CoilOffDelay::update1ms() &rArr; OffDelayCommon::get() &rArr; CommonTimer::inWork() &rArr; CommonTimer::notFinished()
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffDelayCommon::get()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffDelayCommon::update()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::setValue(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to CoilOffDelay::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil_with_timer.o(.rodata._ZTV12CoilOffDelay)
</UL>
<P><STRONG><a name="[e2]"></a>CoilOffDelay::CoilOffDelay(GPIO_TypeDef*, unsigned char, unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, coil_with_timer.o(.text._ZN12CoilOffDelayC2EP12GPIO_TypeDefht))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CoilOffDelay::CoilOffDelay(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; Coil::Coil__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffDelayCommon::OffDelayCommon__sub_object(unsigned int)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IUpdated1ms::IUpdated1ms__sub_object()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.22
</UL>

<P><STRONG><a name="[165]"></a>CoilOffDelay::CoilOffDelay__sub_object(GPIO_TypeDef*, unsigned char, unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, coil_with_timer.o(.text._ZN12CoilOffDelayC2EP12GPIO_TypeDefht), UNUSED)

<P><STRONG><a name="[c5]"></a>CoilOffDelay::operator=(bool)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, coil_with_timer.o(.text._ZN12CoilOffDelayaSEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CoilOffDelay::operator=(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHBTask(void*)
</UL>

<P><STRONG><a name="[45]"></a>ProgrammCoil::isActive()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, coil.o(.text._ZN12ProgrammCoil8isActiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ProgrammCoil::isActive()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil.o(.rodata._ZTV12ProgrammCoil)
</UL>
<P><STRONG><a name="[46]"></a>ProgrammCoil::setValue(bool)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, coil.o(.text._ZN12ProgrammCoil8setValueEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ProgrammCoil::setValue(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil.o(.rodata._ZTV12ProgrammCoil)
</UL>
<P><STRONG><a name="[e6]"></a>ProgrammCoil::ProgrammCoil__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, coil.o(.text._ZN12ProgrammCoilC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ProgrammCoil::ProgrammCoil__sub_object() &rArr; ISwitch::ISwitch__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISwitch::ISwitch__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[e1]"></a>OffDelayCommon::get()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, off_delay.o(.text._ZN14OffDelayCommon3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OffDelayCommon::get() &rArr; CommonTimer::inWork() &rArr; CommonTimer::notFinished()
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::inWork()
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilOffDelay::update1ms()
</UL>

<P><STRONG><a name="[df]"></a>OffDelayCommon::set(bool)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, off_delay.o(.text._ZN14OffDelayCommon3setEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OffDelayCommon::set(bool) &rArr; CommonTimer::prepareAndStart() &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::prepareAndStart()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilOffDelay::setValue(bool)
</UL>

<P><STRONG><a name="[e0]"></a>OffDelayCommon::update()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, off_delay.o(.text._ZN14OffDelayCommon6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OffDelayCommon::update() &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::stop()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finished()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilOffDelay::update1ms()
</UL>

<P><STRONG><a name="[e7]"></a>OffDelayCommon::OffDelayCommon(unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, off_delay.o(.text._ZN14OffDelayCommonC2Ej), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::CommonTimer__sub_object(unsigned int)
</UL>

<P><STRONG><a name="[e3]"></a>OffDelayCommon::OffDelayCommon__sub_object(unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, off_delay.o(.text._ZN14OffDelayCommonC2Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OffDelayCommon::OffDelayCommon__sub_object(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilOffDelay::CoilOffDelay(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[e8]"></a>PulseInterrapt::set(bool)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, pulse.o(.text._ZN14PulseInterrapt3setEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PulseInterrapt::set(bool) &rArr; PulseCommon::set(bool) &rArr; CommonTimer::isFree() &rArr; CommonTimer::notStarted()
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::set(bool)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseInterrapt::operator=(bool)
</UL>

<P><STRONG><a name="[47]"></a>PulseInterrapt::update1ms()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pulse.o(.text._ZN14PulseInterrapt9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PulseInterrapt::update1ms() &rArr; PulseCommon::update() &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to PulseInterrapt::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pulse.o(.rodata._ZTV14PulseInterrapt)
</UL>
<P><STRONG><a name="[e9]"></a>PulseInterrapt::PulseInterrapt(unsigned int)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pulse.o(.text._ZN14PulseInterraptC2Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PulseInterrapt::PulseInterrapt(unsigned int) &rArr; PulseCommon::PulseCommon__sub_object(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::PulseCommon__sub_object(unsigned int)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IUpdated1ms::IUpdated1ms__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.47
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.40
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.33
</UL>

<P><STRONG><a name="[166]"></a>PulseInterrapt::PulseInterrapt__sub_object(unsigned int)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pulse.o(.text._ZN14PulseInterraptC2Ej), UNUSED)

<P><STRONG><a name="[bc]"></a>PulseInterrapt::operator=(bool)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, pulse.o(.text._ZN14PulseInterraptaSEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PulseInterrapt::operator=(bool) &rArr; PulseInterrapt::set(bool) &rArr; PulseCommon::set(bool) &rArr; CommonTimer::isFree() &rArr; CommonTimer::notStarted()
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseInterrapt::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[49]"></a>SequenceDelayed::update1ms()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sequence.o(.text._ZN15SequenceDelayed9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SequenceDelayed::update1ms() &rArr; CommonTimer::setStart(bool) &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finished()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::update()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::setStart(bool)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::locked()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::finish(bool)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::active()
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to SequenceDelayed::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sequence.o(.rodata._ZTV15SequenceDelayed)
</UL>
<P><STRONG><a name="[eb]"></a>SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, sequence.o(.text._ZN15SequenceDelayedC2EPhhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int) &rArr; Sequence::Sequence__sub_object(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::CommonTimer__sub_object(unsigned int)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IUpdated1ms::IUpdated1ms__sub_object()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::Sequence__sub_object(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.50
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.46
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.44
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.43
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.39
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.37
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.36
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.32
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.30
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.29
</UL>

<P><STRONG><a name="[167]"></a>SequenceDelayed::SequenceDelayed__sub_object(unsigned char*, unsigned char, unsigned int)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, sequence.o(.text._ZN15SequenceDelayedC2EPhhj), UNUSED)

<P><STRONG><a name="[4c]"></a>SimpleInputDelayed::isActive()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, simple_input.o(.text._ZN18SimpleInputDelayed8isActiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SimpleInputDelayed::isActive() &rArr; CommonTimer::finished()
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::finished()
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to SimpleInputDelayed::isActive()
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHBTask(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simple_input.o(.rodata._ZTV18SimpleInputDelayed)
</UL>
<P><STRONG><a name="[4b]"></a>SimpleInputDelayed::update1ms()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, simple_input.o(.text._ZN18SimpleInputDelayed9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SimpleInputDelayed::update1ms() &rArr; CommonTimer::setStart(bool) &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::update()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::setStart(bool)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInput::isActive()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to SimpleInputDelayed::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simple_input.o(.rodata._ZTV18SimpleInputDelayed)
</UL>
<P><STRONG><a name="[ed]"></a>SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, simple_input.o(.text._ZN18SimpleInputDelayedC2EP12GPIO_TypeDefht))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonTimer::CommonTimer__sub_object(unsigned int)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IUpdated1ms::IUpdated1ms__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[168]"></a>SimpleInputDelayed::SimpleInputDelayed__sub_object(GPIO_TypeDef*, unsigned char, unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, simple_input.o(.text._ZN18SimpleInputDelayedC2EP12GPIO_TypeDefht), UNUSED)

<P><STRONG><a name="[42]"></a>Coil::isActive()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, coil.o(.text._ZN4Coil8isActiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Coil::isActive()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> coil.o(.rodata._ZTV4Coil)
<LI> coil_with_timer.o(.rodata._ZTV12CoilOffDelay)
<LI> coil_with_timer.o(.rodata._ZTV9CoilPulse)
</UL>
<P><STRONG><a name="[4f]"></a>Coil::setValue(bool)</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, coil.o(.text._ZN4Coil8setValueEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Coil::setValue(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilPulse::update1ms()
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilOffDelay::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil.o(.rodata._ZTV4Coil)
</UL>
<P><STRONG><a name="[ef]"></a>Coil::Coil(GPIO_TypeDef*, unsigned char)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, coil.o(.text._ZN4CoilC2EP12GPIO_TypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgrammCoil::ProgrammCoil__sub_object()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOcommon::GPIOcommon__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.27
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.26
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.25
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.24
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.23
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.21
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.19
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.18
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.17
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.15
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.14
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.11
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
</UL>

<P><STRONG><a name="[e4]"></a>Coil::Coil__sub_object(GPIO_TypeDef*, unsigned char)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, coil.o(.text._ZN4CoilC2EP12GPIO_TypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Coil::Coil__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilOffDelay::CoilOffDelay(GPIO_TypeDef*, unsigned char, unsigned short)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilPulse::CoilPulse(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[b1]"></a>Coil::operator=(bool)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, coil.o(.text._ZN4CoilaSEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Coil::operator=(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetAllSteps(TaskKit*)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetCHBsteps()
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diagTask(void*)
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHBTask(void*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[de]"></a>ISwitch::ISwitch__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, coil.o(.text._ZN7ISwitchC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ISwitch::ISwitch__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInput::SimpleInput(GPIO_TypeDef*, unsigned char)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgrammCoil::ProgrammCoil__sub_object()
</UL>

<P><STRONG><a name="[bd]"></a>Sequence::finishedImpulse()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sequence.o(.text._ZN8Sequence15finishedImpulseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sequence::finishedImpulse() &rArr; RFimpulse::get()
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFimpulse::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHBTask(void*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[c3]"></a>Sequence::lock(bool)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sequence.o(.text._ZN8Sequence4lockEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sequence::lock(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHBTask(void*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[b0]"></a>Sequence::reset()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sequence.o(.text._ZN8Sequence5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sequence::reset() &rArr; RFimpulse::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFimpulse::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetAllSteps(TaskKit*)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetCHBsteps()
</UL>

<P><STRONG><a name="[be]"></a>Sequence::start(bool)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sequence.o(.text._ZN8Sequence5startEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Sequence::start(bool) &rArr; Sequence::isMyStep()
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::isMyStep()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHBTask(void*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[bb]"></a>Sequence::active()</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sequence.o(.text._ZN8Sequence6activeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Sequence::active() &rArr; Sequence::locked()
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::locked()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::finished()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::started()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHBTask(void*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::update1ms()
</UL>

<P><STRONG><a name="[c0]"></a>Sequence::finish(bool)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sequence.o(.text._ZN8Sequence6finishEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sequence::finish(bool) &rArr; RFimpulse::set(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFimpulse::set(bool)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::isMyStep()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHBTask(void*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::update1ms()
</UL>

<P><STRONG><a name="[c2]"></a>Sequence::locked()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, sequence.o(.text._ZN8Sequence6lockedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Sequence::locked()
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::active()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::update1ms()
</UL>

<P><STRONG><a name="[f3]"></a>Sequence::started()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, sequence.o(.text._ZN8Sequence7startedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Sequence::started()
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::active()
</UL>

<P><STRONG><a name="[f4]"></a>Sequence::finished()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, sequence.o(.text._ZN8Sequence8finishedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Sequence::finished()
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::active()
</UL>

<P><STRONG><a name="[f2]"></a>Sequence::isMyStep()</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, sequence.o(.text._ZN8Sequence8isMyStepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Sequence::isMyStep()
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::finish(bool)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::start(bool)
</UL>

<P><STRONG><a name="[f5]"></a>Sequence::Sequence(unsigned char*, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sequence.o(.text._ZN8SequenceC2EPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sequence::Sequence(unsigned char*, unsigned char) &rArr; RFimpulse::RFimpulse__sub_object(IMPULSE)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFimpulse::RFimpulse__sub_object(IMPULSE)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.51
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.49
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.48
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.45
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.42
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.41
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.38
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.35
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.34
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.31
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.28
</UL>

<P><STRONG><a name="[ec]"></a>Sequence::Sequence__sub_object(unsigned char*, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sequence.o(.text._ZN8SequenceC2EPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sequence::Sequence__sub_object(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int)
</UL>

<P><STRONG><a name="[51]"></a>CoilPulse::setValue(bool)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, coil_with_timer.o(.text._ZN9CoilPulse8setValueEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CoilPulse::setValue(bool) &rArr; PulseCommon::set(bool) &rArr; CommonTimer::isFree() &rArr; CommonTimer::notStarted()
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to CoilPulse::setValue(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil_with_timer.o(.rodata._ZTV9CoilPulse)
</UL>
<P><STRONG><a name="[50]"></a>CoilPulse::update1ms()</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, coil_with_timer.o(.text._ZN9CoilPulse9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CoilPulse::update1ms() &rArr; PulseCommon::get() &rArr; CommonTimer::inWork() &rArr; CommonTimer::notFinished()
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::update()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::setValue(bool)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to CoilPulse::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil_with_timer.o(.rodata._ZTV9CoilPulse)
</UL>
<P><STRONG><a name="[f7]"></a>CoilPulse::CoilPulse(GPIO_TypeDef*, unsigned char, unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, coil_with_timer.o(.text._ZN9CoilPulseC2EP12GPIO_TypeDefht))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CoilPulse::CoilPulse(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; Coil::Coil__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCommon::PulseCommon__sub_object(unsigned int)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IUpdated1ms::IUpdated1ms__sub_object()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.20
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.16
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.12
</UL>

<P><STRONG><a name="[169]"></a>CoilPulse::CoilPulse__sub_object(GPIO_TypeDef*, unsigned char, unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, coil_with_timer.o(.text._ZN9CoilPulseC2EP12GPIO_TypeDefht), UNUSED)

<P><STRONG><a name="[b2]"></a>CoilPulse::operator=(bool)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, coil_with_timer.o(.text._ZN9CoilPulseaSEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CoilPulse::operator=(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetAllSteps(TaskKit*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[f0]"></a>RFimpulse::get()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rf_impulse.o(.text._ZN9RFimpulse3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFimpulse::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::finishedImpulse()
</UL>

<P><STRONG><a name="[f1]"></a>RFimpulse::set(bool)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rf_impulse.o(.text._ZN9RFimpulse3setEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RFimpulse::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::finish(bool)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::reset()
</UL>

<P><STRONG><a name="[16a]"></a>RFimpulse::RFimpulse(IMPULSE)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf_impulse.o(.text._ZN9RFimpulseC2E7IMPULSE), UNUSED)

<P><STRONG><a name="[f6]"></a>RFimpulse::RFimpulse__sub_object(IMPULSE)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf_impulse.o(.text._ZN9RFimpulseC2E7IMPULSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFimpulse::RFimpulse__sub_object(IMPULSE)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::Sequence(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[43]"></a>non-virtual thunk to CoilOffDelay::setValue(bool)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, coil_with_timer.o(.text._ZThn16_N12CoilOffDelay8setValueEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = non-virtual thunk to CoilOffDelay::setValue(bool) &rArr; CoilOffDelay::setValue(bool) &rArr; OffDelayCommon::set(bool) &rArr; CommonTimer::prepareAndStart() &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilOffDelay::setValue(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil_with_timer.o(.rodata._ZTV12CoilOffDelay)
</UL>
<P><STRONG><a name="[48]"></a>non-virtual thunk to PulseInterrapt::update1ms()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, pulse.o(.text._ZThn16_N14PulseInterrapt9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = non-virtual thunk to PulseInterrapt::update1ms() &rArr; PulseInterrapt::update1ms() &rArr; PulseCommon::update() &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseInterrapt::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pulse.o(.rodata._ZTV14PulseInterrapt)
</UL>
<P><STRONG><a name="[4d]"></a>non-virtual thunk to SimpleInputDelayed::isActive()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, simple_input.o(.text._ZThn16_N18SimpleInputDelayed8isActiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = non-virtual thunk to SimpleInputDelayed::isActive() &rArr; SimpleInputDelayed::isActive() &rArr; CommonTimer::finished()
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::isActive()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simple_input.o(.rodata._ZTV18SimpleInputDelayed)
</UL>
<P><STRONG><a name="[52]"></a>non-virtual thunk to CoilPulse::setValue(bool)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, coil_with_timer.o(.text._ZThn16_N9CoilPulse8setValueEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = non-virtual thunk to CoilPulse::setValue(bool) &rArr; CoilPulse::setValue(bool) &rArr; PulseCommon::set(bool) &rArr; CommonTimer::isFree() &rArr; CommonTimer::notStarted()
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilPulse::setValue(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil_with_timer.o(.rodata._ZTV9CoilPulse)
</UL>
<P><STRONG><a name="[4a]"></a>non-virtual thunk to SequenceDelayed::update1ms()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, sequence.o(.text._ZThn28_N15SequenceDelayed9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = non-virtual thunk to SequenceDelayed::update1ms() &rArr; SequenceDelayed::update1ms() &rArr; CommonTimer::setStart(bool) &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sequence.o(.rodata._ZTV15SequenceDelayed)
</UL>
<P><STRONG><a name="[44]"></a>non-virtual thunk to CoilOffDelay::update1ms()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, coil_with_timer.o(.text._ZThn32_N12CoilOffDelay9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = non-virtual thunk to CoilOffDelay::update1ms() &rArr; CoilOffDelay::update1ms() &rArr; OffDelayCommon::get() &rArr; CommonTimer::inWork() &rArr; CommonTimer::notFinished()
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilOffDelay::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil_with_timer.o(.rodata._ZTV12CoilOffDelay)
</UL>
<P><STRONG><a name="[4e]"></a>non-virtual thunk to SimpleInputDelayed::update1ms()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, simple_input.o(.text._ZThn32_N18SimpleInputDelayed9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = non-virtual thunk to SimpleInputDelayed::update1ms() &rArr; SimpleInputDelayed::update1ms() &rArr; CommonTimer::setStart(bool) &rArr; CommonTimer::stop() &rArr; CommonTimer::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simple_input.o(.rodata._ZTV18SimpleInputDelayed)
</UL>
<P><STRONG><a name="[53]"></a>non-virtual thunk to CoilPulse::update1ms()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, coil_with_timer.o(.text._ZThn32_N9CoilPulse9update1msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = non-virtual thunk to CoilPulse::update1ms() &rArr; CoilPulse::update1ms() &rArr; PulseCommon::get() &rArr; CommonTimer::inWork() &rArr; CommonTimer::notFinished()
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilPulse::update1ms()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coil_with_timer.o(.rodata._ZTV9CoilPulse)
</UL>
<P><STRONG><a name="[3e]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 2]<UL><LI> coil_with_timer.o(.rodata._ZTV11IUpdated1ms)
<LI> coil.o(.rodata._ZTV7ISwitch)
</UL>
<P><STRONG><a name="[f8]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[61]"></a>main</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickInit()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rccInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[11f]"></a>pvPortMalloc</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[10d]"></a>pxPortInitialiseStack</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[fc]"></a>uxListRemove</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, list.o(.text.uxListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[108]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[126]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[12d]"></a>vApplicationTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[101]"></a>vListInitialise</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, list.o(.text.vListInitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[10c]"></a>vListInitialiseItem</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[fd]"></a>vListInsert</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[b5]"></a>vPortEnterCritical</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteSeqFromQueue(Sequence*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSeqFromQueue()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushSeqInQueue(Sequence*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[b6]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteSeqFromQueue(Sequence*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSeqFromQueue()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushSeqInQueue(Sequence*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[107]"></a>vPortFree</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[127]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[118]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[c4]"></a>vTaskDelay</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diagTask(void*)
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHBTask(void*)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBTask(void*)
</UL>

<P><STRONG><a name="[129]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[11e]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[123]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[122]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[fa]"></a>vTaskStartScheduler</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[55]"></a>vTaskSwitchContext</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[125]"></a>xPortStartScheduler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[102]"></a>xQueueGenericCreate</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[10a]"></a>xQueueGenericReset</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[113]"></a>xQueueReceive</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[12a]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskCheckForTimeOut &rArr; vTaskInternalSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[f9]"></a>xTaskCreate</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>xTaskGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[77]"></a>xTaskIncrementTick</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11d]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 368 bytes, Stack size 28 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[117]"></a>xTaskResumeAll</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[124]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[78]"></a>__cxx_global_var_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init &rArr; SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[79]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.1 &rArr; SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[7a]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.2 &rArr; SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[7b]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.3 &rArr; SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[7c]"></a>__cxx_global_var_init.4</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.4 &rArr; SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[7d]"></a>__cxx_global_var_init.5</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.5 &rArr; SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[7e]"></a>__cxx_global_var_init.6</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.6))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.6 &rArr; SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[7f]"></a>__cxx_global_var_init.7</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.7))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.7 &rArr; SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[80]"></a>__cxx_global_var_init.8</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.8))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.8 &rArr; SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; SimpleInput::SimpleInput__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleInputDelayed::SimpleInputDelayed(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[81]"></a>__cxx_global_var_init.9</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.9))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.9 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[82]"></a>__cxx_global_var_init.10</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.10))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.10 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[83]"></a>__cxx_global_var_init.11</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.11))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.11 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[84]"></a>__cxx_global_var_init.12</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.12))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.12 &rArr; CoilPulse::CoilPulse(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; Coil::Coil__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilPulse::CoilPulse(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[85]"></a>__cxx_global_var_init.13</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.13))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.13 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[86]"></a>__cxx_global_var_init.14</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.14))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.14 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[87]"></a>__cxx_global_var_init.15</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.15))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.15 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[88]"></a>__cxx_global_var_init.16</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.16))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.16 &rArr; CoilPulse::CoilPulse(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; Coil::Coil__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilPulse::CoilPulse(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[89]"></a>__cxx_global_var_init.17</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.17))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.17 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[8a]"></a>__cxx_global_var_init.18</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.18))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.18 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[8b]"></a>__cxx_global_var_init.19</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.19))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.19 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[8c]"></a>__cxx_global_var_init.20</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.20))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.20 &rArr; CoilPulse::CoilPulse(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; Coil::Coil__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilPulse::CoilPulse(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[8d]"></a>__cxx_global_var_init.21</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.21))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.21 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[8e]"></a>__cxx_global_var_init.22</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.22))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.22 &rArr; CoilOffDelay::CoilOffDelay(GPIO_TypeDef*, unsigned char, unsigned short) &rArr; Coil::Coil__sub_object(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoilOffDelay::CoilOffDelay(GPIO_TypeDef*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[8f]"></a>__cxx_global_var_init.23</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.23))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.23 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[90]"></a>__cxx_global_var_init.24</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.24))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.24 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[91]"></a>__cxx_global_var_init.25</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.25))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.25 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[92]"></a>__cxx_global_var_init.26</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.26))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.26 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[93]"></a>__cxx_global_var_init.27</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.27))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __cxx_global_var_init.27 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coil::Coil(GPIO_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[94]"></a>__cxx_global_var_init.28</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.28))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.28 &rArr; Sequence::Sequence(unsigned char*, unsigned char) &rArr; RFimpulse::RFimpulse__sub_object(IMPULSE)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::Sequence(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[95]"></a>__cxx_global_var_init.29</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.29))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.29 &rArr; SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int) &rArr; Sequence::Sequence__sub_object(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[96]"></a>__cxx_global_var_init.30</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.30))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.30 &rArr; SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int) &rArr; Sequence::Sequence__sub_object(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[97]"></a>__cxx_global_var_init.31</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.31))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.31 &rArr; Sequence::Sequence(unsigned char*, unsigned char) &rArr; RFimpulse::RFimpulse__sub_object(IMPULSE)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::Sequence(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[98]"></a>__cxx_global_var_init.32</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.32 &rArr; SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int) &rArr; Sequence::Sequence__sub_object(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[99]"></a>__cxx_global_var_init.33</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.33))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __cxx_global_var_init.33 &rArr; PulseInterrapt::PulseInterrapt(unsigned int) &rArr; PulseCommon::PulseCommon__sub_object(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseInterrapt::PulseInterrapt(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[9a]"></a>__cxx_global_var_init.34</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.34))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.34 &rArr; Sequence::Sequence(unsigned char*, unsigned char) &rArr; RFimpulse::RFimpulse__sub_object(IMPULSE)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::Sequence(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[9b]"></a>__cxx_global_var_init.35</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.35))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.35 &rArr; Sequence::Sequence(unsigned char*, unsigned char) &rArr; RFimpulse::RFimpulse__sub_object(IMPULSE)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::Sequence(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[9c]"></a>__cxx_global_var_init.36</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.36))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.36 &rArr; SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int) &rArr; Sequence::Sequence__sub_object(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[9d]"></a>__cxx_global_var_init.37</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.37))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.37 &rArr; SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int) &rArr; Sequence::Sequence__sub_object(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[9e]"></a>__cxx_global_var_init.38</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.38))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.38 &rArr; Sequence::Sequence(unsigned char*, unsigned char) &rArr; RFimpulse::RFimpulse__sub_object(IMPULSE)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::Sequence(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[9f]"></a>__cxx_global_var_init.39</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.39))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.39 &rArr; SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int) &rArr; Sequence::Sequence__sub_object(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[a0]"></a>__cxx_global_var_init.40</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.40))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __cxx_global_var_init.40 &rArr; PulseInterrapt::PulseInterrapt(unsigned int) &rArr; PulseCommon::PulseCommon__sub_object(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseInterrapt::PulseInterrapt(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[a1]"></a>__cxx_global_var_init.41</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.41))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.41 &rArr; Sequence::Sequence(unsigned char*, unsigned char) &rArr; RFimpulse::RFimpulse__sub_object(IMPULSE)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::Sequence(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[a2]"></a>__cxx_global_var_init.42</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.42))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.42 &rArr; Sequence::Sequence(unsigned char*, unsigned char) &rArr; RFimpulse::RFimpulse__sub_object(IMPULSE)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::Sequence(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[a3]"></a>__cxx_global_var_init.43</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.43))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.43 &rArr; SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int) &rArr; Sequence::Sequence__sub_object(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[a4]"></a>__cxx_global_var_init.44</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.44))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.44 &rArr; SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int) &rArr; Sequence::Sequence__sub_object(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[a5]"></a>__cxx_global_var_init.45</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.45))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.45 &rArr; Sequence::Sequence(unsigned char*, unsigned char) &rArr; RFimpulse::RFimpulse__sub_object(IMPULSE)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::Sequence(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[a6]"></a>__cxx_global_var_init.46</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.46))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.46 &rArr; SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int) &rArr; Sequence::Sequence__sub_object(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[a7]"></a>__cxx_global_var_init.47</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.47))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __cxx_global_var_init.47 &rArr; PulseInterrapt::PulseInterrapt(unsigned int) &rArr; PulseCommon::PulseCommon__sub_object(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseInterrapt::PulseInterrapt(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[a8]"></a>__cxx_global_var_init.48</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.48))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.48 &rArr; Sequence::Sequence(unsigned char*, unsigned char) &rArr; RFimpulse::RFimpulse__sub_object(IMPULSE)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::Sequence(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[a9]"></a>__cxx_global_var_init.49</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.49))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.49 &rArr; Sequence::Sequence(unsigned char*, unsigned char) &rArr; RFimpulse::RFimpulse__sub_object(IMPULSE)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::Sequence(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[aa]"></a>__cxx_global_var_init.50</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.50))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.50 &rArr; SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int) &rArr; Sequence::Sequence__sub_object(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenceDelayed::SequenceDelayed(unsigned char*, unsigned char, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[ab]"></a>__cxx_global_var_init.51</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.__cxx_global_var_init.51))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.51 &rArr; Sequence::Sequence(unsigned char*, unsigned char) &rArr; RFimpulse::RFimpulse__sub_object(IMPULSE)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence::Sequence(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[54]"></a>_GLOBAL__sub_I_main.cpp</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, main.o(.text._GLOBAL__sub_I_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _GLOBAL__sub_I_main.cpp &rArr; __cxx_global_var_init.27 &rArr; Coil::Coil(GPIO_TypeDef*, unsigned char) &rArr; void setBitsInRegister&lang;unsigned int volatile&rang;(unsigned int volatile*, unsigned int, unsigned int) &rArr; getPosition(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.51
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.50
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.49
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.48
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.47
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.46
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.45
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.44
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.43
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.42
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.41
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.40
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.39
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.38
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.37
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.36
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.35
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.34
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.33
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.32
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.31
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.30
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.29
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.28
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.27
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.26
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.25
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.24
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.23
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.22
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.21
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.20
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.19
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.18
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.17
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.16
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.15
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.14
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.12
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.11
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[3a]"></a>prvTaskExitError</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[128]"></a>prvPortStartFirstTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[120]"></a>prvHeapInit</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, heap_4.o(.text.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[121]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[109]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(.text.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[11c]"></a>prvUnlockQueue</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[10f]"></a>prvIsQueueEmpty</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[105]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, queue.o(.text.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[10b]"></a>prvInitialiseNewTask</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[fe]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[ff]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tasks.o(.text.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[12c]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[104]"></a>prvDeleteTCB</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[fb]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[3b]"></a>prvIdleTask</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[103]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(.text.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[100]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[3c]"></a>prvTimerTask</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[11b]"></a>prvGetNextExpireTime</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(.text.prvGetNextExpireTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetNextExpireTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[115]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, timers.o(.text.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[112]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, timers.o(.text.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[114]"></a>prvSampleTimeNow</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[110]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, timers.o(.text.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[10e]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[111]"></a>prvReloadTimer</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, timers.o(.text.prvReloadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[11a]"></a>prvSwitchTimerLists</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timers.o(.text.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[ad]"></a>__NVIC_SetPriorityGrouping(unsigned int)</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, init.o(.text._ZL26__NVIC_SetPriorityGroupingj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
</UL>

<P><STRONG><a name="[c9]"></a>__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, init.o(.text._ZL16__NVIC_EnableIRQ4IRQn))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickInit()
</UL>

<P><STRONG><a name="[ca]"></a>__NVIC_SetPriority(IRQn, unsigned int)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, init.o(.text._ZL18__NVIC_SetPriority4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority(IRQn, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickInit()
</UL>

<P><STRONG><a name="[75]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[76]"></a>SetSysClockTo72</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, system_stm32f10x.o(.text.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
